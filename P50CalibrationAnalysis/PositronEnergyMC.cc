// This code analyzes the data generated by PG4. It
// take the energy of the primary particles and make
// save the energy spectrum of positrons only.
#include <iostream>
#include <cstring>
#include <cmath>

#include "TString.h"
#include "TFile.h"
#include "TTree.h"
#include "TBranch.h"
#include "TH1F.h"
#include "TGraph.h"
#include "TMath.h"

#include "DetResponse.hh"

int main(int argc, char** argv) {

  TString InputFile = argv[1];
  std::cout<<"Reading the data file: "<< InputFile <<".."<<std::endl;

  TString OutputFile(InputFile);
  OutputFile.ReplaceAll(".root", "_Det_E.root");

  TFile* fInputFile = new TFile(InputFile.Data(),"READ");
  TTree* T = (TTree*)fInputFile->Get("PG4");

  TFile* gOutputFile = new TFile(OutputFile.Data(), "RECREATE");

  ParticleEvent* sprim = new ParticleEvent();
  IoniClusterEvent* sion = new IoniClusterEvent();
  T->SetBranchAddress("Prim", &sprim);
  T->SetBranchAddress("ScIoni", &sion);

  Long64_t nentries = T->GetEntries();
  std::cout << "Scanning " << nentries << " events...\n";

  DetResponse* dRes = new DetResponse();

  for (Long64_t i = 0; i<nentries; i++){
    sprim->Clear();
    T->GetEntry(i);
    Int_t nSprim = sprim->particles->GetEntriesFast();
    for (int j = 0; j < nSprim; j++){
      ParticleVertex* primParticle = (ParticleVertex*)sprim->particles->At(j);
        dRes->FillPrimEvent(primParticle, i);
		}
  }

  for (Long64_t i = 0; i<nentries; i++){
    sion->Clear();
    T->GetEntry(i);
    Int_t nSion = sion->clusts->GetEntriesFast();

    for (int j = 0; j < nSion; j++){
      IoniCluster* ei = (IoniCluster*)sion->clusts->At(j);
      dRes->FillDetEvent(ei, i);
    }
  }

  dRes->DrawHisto();
  dRes->E_prim->Write();
  dRes->E_dep_tot->Write();
	dRes->E_dep_0->Write();
	dRes->E_dep_1->Write();
  gOutputFile->Close();

  return 0;
}

