// This code analyzes the data generated by PG4. It
// take the energy of the primary particles and make
// save the energy spectrum of positrons only.
#include <iostream>
#include <cstring>
#include <cmath>

#include "TString.h"
#include "TFile.h"
#include "TTree.h"
#include "TBranch.h"
#include "TH1F.h"
#include "TGraph.h"
#include "TMath.h"

#include "DetResponse.hh"

double eNoise = 0.05;
double histoWidth = 0.01;

int main(int argc, char** argv) {

  TString InputFile = argv[1];
	Int_t atom_z = std::atoi(argv[2]);
//	double eMin = std::stod(argv[2]);
//	double eMax = std::stod(argv[3]);
//	int nbins  = (eMax-eMin)/histoWidth;
  std::cout<<"Reading the data file: "<< InputFile <<".."<<std::endl;

  TString OutputFile(InputFile);
  OutputFile.ReplaceAll(".root", ("_Det_E_"+std::to_string(atom_z)+".root").c_str());

  TFile* fInputFile = new TFile(InputFile.Data(),"READ");
  TTree* T = (TTree*)fInputFile->Get("PG4");

  TFile* gOutputFile = new TFile(OutputFile.Data(), "RECREATE");

  ParticleEvent* sprim = new ParticleEvent();
  IoniClusterEvent* sion = new IoniClusterEvent();
	NCaptEvent* sncapt = new NCaptEvent();
	
  T->SetBranchAddress("Prim", &sprim);
  T->SetBranchAddress("ScIoni", &sion);
	T->SetBranchAddress("ScN", &sncapt);

  Long64_t nentries = T->GetEntries();
  std::cout << "Scanning " << nentries << " events...\n";

  DetResponse* dRes = new DetResponse();

	//TH1F* E_dep_tot = new TH1F("E_dep_tot", "Total energy depostion in all volumes" , nbins, eMin, eMax);
	//TH1F* E_dep_0 = new TH1F("E_dep_0", "Total energy depostion in volume - 2" , nbins, eMin, eMax);
	//TH1F* E_dep_1 = new TH1F("E_dep_1", "Total energy depostion in volume - 1" , nbins, eMin, eMax);
  for (Long64_t i = 0; i<nentries; i++){
		sncapt->Clear();
		sion->Clear();
		T->GetEntry(i);
    Int_t nSNCapt = sncapt->nCapts->GetEntriesFast();	
		Int_t nSion = sion->clusts->GetEntriesFast();
		int captEvtNo = 0;
		double energy[2] = {0,0}; 
    for (int j = 0; j < nSNCapt; j++){
      NCapt* en = (NCapt*)sncapt->nCapts->At(j);
			if(en->capt_Z == atom_z) {
				captEvtNo = en->evt;
				for (int k = 0; k < nSion; k++){
					IoniCluster* ei = (IoniCluster*)sion->clusts->At(k);
					if (ei->evt == captEvtNo && ei->vol == 0) energy[0] += ei->Eq;
					if (ei->evt == captEvtNo && ei->vol == 1) energy[1] += ei->Eq;
				}
			}
    }
		
		if (energy[0]<=0 && energy[1]<=0) continue;
		if (energy[0]>0.01) dRes->E_dep_0->Fill(energy[0]);
		if (energy[1]>0.01) dRes->E_dep_1->Fill(energy[1]);
  }

  dRes->DrawHisto();
  dRes->E_prim->Write();
  dRes->E_dep_tot->Write();
	dRes->E_dep_0->Write();
	dRes->E_dep_1->Write();
  gOutputFile->Close();

  return 0;
}
